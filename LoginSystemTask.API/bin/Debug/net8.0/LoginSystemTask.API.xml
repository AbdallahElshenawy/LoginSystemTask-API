<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LoginSystemTask.API</name>
    </assembly>
    <members>
        <member name="T:LoginSystemTask.API.Controllers.AuditLogsController">
            <summary>
            Controller for retrieving audit logs.
            </summary>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.AuditLogsController.#ctor(LoginSystemTask.Application.Interfaces.IServices.IAuditLogService)">
            <summary>
            Controller for retrieving audit logs.
            </summary>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.AuditLogsController.GetAuditLogs(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Retrieves audit logs with optional filters.
            </summary>
            <param name="action">Filter by action type (e.g., "Create", "Update", "Delete"). Optional.</param>
            <param name="entityName">Filter by entity name (e.g., "User", "Employee", "Role"). Optional.</param>
            <param name="userId">Filter by the ID of the user who performed the action. Optional.</param>
            <param name="startDate">Filter logs on or after this date. Optional.</param>
            <param name="endDate">Filter logs on or before this date. Optional.</param>
            <returns>A list of audit logs matching the specified filters.</returns>
            <response code="200">Audit logs retrieved successfully.</response>
            <response code="401">Unauthorized if the caller lacks admin privileges.</response>
            <response code="500">Server error if the retrieval fails.</response>
        </member>
        <member name="T:LoginSystemTask.API.Controllers.AuthController">
            <summary>
            Controller for handling authentication and user role management.
            </summary>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.AuthController.#ctor(LoginSystemTask.Application.Interfaces.IServices.Authentication.IAuthService)">
            <summary>
            Controller for handling authentication and user role management.
            </summary>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.AuthController.Login(LoginSystemTask.Application.DTO.LoginDto)">
            <summary>
            Authenticates a user and generates a JWT token.
            </summary>
            <param name="dto">The login credentials.</param>
            <returns>A JWT token if authentication is successful.</returns>
            <response code="200">Returns the generated JWT token.</response>
            <response code="401">Invalid username or password.</response>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.AuthController.AssignRole(System.Int32,System.String)">
            <summary>
            Assigns a role to a specified user.
            </summary>
            <param name="userId">The ID of the user to whom the role will be assigned.</param>
            <param name="roleName">The role to be assigned to the user.</param>
            <returns>A success message if the role is assigned.</returns>
            <response code="200">Role assigned successfully.</response>
            <response code="400">Invalid input or user/role not found.</response>
            <response code="401">Unauthorized if the caller lacks admin privileges.</response>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.AuthController.UpdateUserRole(System.Int32,System.String)">
            <summary>
            Updates the role of a specified user.
            </summary>
            <param name="userId">The ID of the user whose role is to be updated.</param>
            <param name="roleName">The new role to be assigned to the user.</param>
            <returns>A success message if the role is updated.</returns>
            <response code="200">User role updated successfully.</response>
            <response code="400">Invalid input or user not found.</response>
            <response code="401">Unauthorized if the caller lacks admin privileges.</response>
        </member>
        <member name="T:LoginSystemTask.API.Controllers.EmployeesController">
            <summary>
            Controller for managing employee operations.
            </summary>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.EmployeesController.#ctor(LoginSystemTask.Application.Interfaces.IServices.IEmployeeService)">
            <summary>
            Controller for managing employee operations.
            </summary>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.EmployeesController.AddEmployee(LoginSystemTask.Application.DTO.Employee.EmployeeAddDto)">
            <summary>
            Creates a new employee in the system.
            </summary>
            <param name="dto">The employee details to create.</param>
            <returns>The created employee details.</returns>
            <response code="201">Employee created successfully.</response>
            <response code="400">Invalid input (e.g., missing fields, duplicate EmployeeCode, invalid UserId).</response>
            <response code="401">Unauthorized if the caller lacks admin privileges.</response>
            <response code="500">Server error if the employee creation fails.</response>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.EmployeesController.UpdateEmployee(System.Guid,LoginSystemTask.Application.DTO.Employee.EmployeeUpdateDto)">
            <summary>
            Updates an existing employee.
            </summary>
            <param name="id">The GUID of the employee to update.</param>
            <param name="dto">The updated employee details.</param>
            <returns>The updated employee details.</returns>
            <response code="200">Employee updated successfully.</response>
            <response code="400">Invalid input (e.g., ID mismatch, invalid UserId, attempt to change EmployeeCode).</response>
            <response code="401">Unauthorized if the caller lacks admin privileges.</response>
            <response code="404">Employee not found.</response>
            <response code="500">Server error if the update fails.</response>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.EmployeesController.DeleteEmployee(System.Guid)">
            <summary>
            Deletes an employee by ID.
            </summary>
            <param name="id">The GUID of the employee to delete.</param>
            <returns>No content on successful deletion.</returns>
            <response code="204">Employee deleted successfully.</response>
            <response code="400">Invalid request (e.g., employee is active).</response>
            <response code="401">Unauthorized if the caller lacks admin privileges.</response>
            <response code="404">Employee not found.</response>
            <response code="500">Server error if the deletion fails.</response>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.EmployeesController.GetEmployeeByCode(System.String)">
            <summary>
            Retrieves an employee by their employee code.
            </summary>
            <param name="employeeCode">The unique code of the employee to retrieve.</param>
            <returns>The employee details if found.</returns>
            <response code="200">Employee retrieved successfully.</response>
            <response code="404">Employee not found.</response>
            <response code="400">Invalid request (e.g., server error).</response>
            <remarks>Currently no authentication required; consider adding authorization if needed.</remarks>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.EmployeesController.GetFilteredEmployees(System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Boolean)">
            <summary>
            Retrieves a filtered list of employees.
            </summary>
            <param name="name">Filter by employee name (optional).</param>
            <param name="jobTitle">Filter by job title (optional).</param>
            <param name="minSalary">Filter by minimum salary (optional).</param>
            <param name="maxSalary">Filter by maximum salary (optional).</param>
            <param name="expandSalaryDetails">Include salary details in the response if true (default: false).</param>
            <returns>A list of employees matching the filters.</returns>
            <response code="200">Employees retrieved successfully.</response>
            <response code="400">Invalid request (e.g., server error).</response>
            <remarks>Currently no authentication required; consider adding authorization if needed.</remarks>
        </member>
        <member name="T:LoginSystemTask.API.Controllers.PermissionsController">
            <summary>
            Controller for managing permissions.
            </summary>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.PermissionsController.#ctor(LoginSystemTask.Application.Interfaces.IServices.Authentication.IPermissionService)">
            <summary>
            Controller for managing permissions.
            </summary>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.PermissionsController.CreatePermission(System.String)">
            <summary>
            Creates a new permission.
            </summary>
            <param name="name">The name of the permission to create.</param>
            <returns>The created permission.</returns>
            <response code="201">Permission created successfully.</response>
            <response code="400">Invalid input (e.g., empty name, duplicate permission).</response>
            <response code="401">Unauthorized if the caller lacks admin privileges.</response>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.PermissionsController.GetPermissionById(System.Int32)">
            <summary>
            Retrieves a permission by its ID.
            </summary>
            <param name="id">The ID of the permission.</param>
            <returns>The requested permission.</returns>
            <response code="200">Permission retrieved successfully.</response>
            <response code="404">Permission not found.</response>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.PermissionsController.GetAllPermissions">
            <summary>
            Retrieves all permissions.
            </summary>
            <returns>A list of all permissions.</returns>
            <response code="200">Permissions retrieved successfully.</response>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.PermissionsController.UpdatePermission(System.Int32,System.String)">
            <summary>
            Updates an existing permission.
            </summary>
            <param name="id">The ID of the permission to update.</param>
            <param name="name">The new name of the permission.</param>
            <response code="204">Permission updated successfully.</response>
            <response code="400">Invalid input (e.g., empty name, duplicate permission).</response>
            <response code="401">Unauthorized if the caller lacks admin privileges.</response>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.PermissionsController.DeletePermission(System.Int32)">
            <summary>
            Deletes a permission by ID.
            </summary>
            <param name="id">The ID of the permission to delete.</param>
            <response code="204">Permission deleted successfully.</response>
            <response code="404">Permission not found.</response>
            <response code="401">Unauthorized if the caller lacks admin privileges.</response>
        </member>
        <member name="T:LoginSystemTask.API.Controllers.RolesController">
            <summary>
            Controller for managing roles and their permissions.
            </summary>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.RolesController.#ctor(LoginSystemTask.Application.Interfaces.IServices.Authentication.IRoleService)">
            <summary>
            Controller for managing roles and their permissions.
            </summary>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.RolesController.AddRole(System.String)">
            <summary>
            Creates a new role in the system.
            </summary>
            <param name="roleName">The name of the role to create.</param>
            <returns>A success message if the role is created.</returns>
            <response code="200">Role created successfully.</response>
            <response code="400">Invalid input (e.g., empty role name, role already exists).</response>
            <response code="401">Unauthorized if the caller lacks admin privileges.</response>
            <response code="500">Server error if the role creation fails.</response>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.RolesController.AddPermission(System.Int32,System.Int32)">
            <summary>
            Assigns a permission to a role.
            </summary>
            <param name="roleId">The ID of the role to assign the permission to.</param>
            <param name="permissionId">The ID of the permission to assign.</param>
            <returns>A success response if the permission is assigned.</returns>
            <response code="200">Permission assigned successfully.</response>
            <response code="400">Invalid input (e.g., role or permission not found).</response>
            <response code="401">Unauthorized if the caller lacks admin privileges.</response>
            <response code="500">Server error if the assignment fails.</response>
            <remarks>If the permission is already assigned, the request is ignored.</remarks>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.RolesController.GetAllRolesWithPermissions">
            <summary>
            Retrieves all roles with their associated permissions.
            </summary>
            <returns>A list of roles with their permissions.</returns>
            <response code="200">Roles retrieved successfully.</response>
            <response code="401">Unauthorized if the caller lacks admin privileges.</response>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.RolesController.RemovePermission(System.Int32,System.Int32)">
            <summary>
            Removes a permission from a role.
            </summary>
            <param name="roleId">The ID of the role to remove the permission from.</param>
            <param name="permissionId">The ID of the permission to remove.</param>
            <returns>No content on successful removal.</returns>
            <response code="204">Permission removed successfully.</response>
            <response code="401">Unauthorized if the caller lacks admin privileges.</response>
            <response code="500">Server error if the removal fails.</response>
            <remarks>If the permission is not assigned, the request is ignored.</remarks>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.RolesController.GetPermissions(System.Int32)">
            <summary>
            Retrieves the permissions assigned to a specific role.
            </summary>
            <param name="roleId">The ID of the role to retrieve permissions for.</param>
            <returns>A list of permission names assigned to the role.</returns>
            <response code="200">Permissions retrieved successfully.</response>
            <response code="401">Unauthorized if the caller lacks admin privileges.</response>
        </member>
        <member name="T:LoginSystemTask.API.Controllers.UsersController">
            <summary>
            Controller for managing user operations.
            </summary>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.UsersController.#ctor(LoginSystemTask.Application.Interfaces.IServices.IUserService)">
            <summary>
            Controller for managing user operations.
            </summary>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.UsersController.AddUser(LoginSystemTask.Application.DTO.User.UserAddDto)">
            <summary>
            Creates a new user in the system.
            </summary>
            <param name="dto">The user details to create.</param>
            <returns>The created user details.</returns>
            <response code="201">User created successfully.</response>
            <response code="400">Invalid input (e.g., missing username or password, invalid role ID).</response>
            <response code="401">Unauthorized if the caller lacks admin privileges.</response>
            <response code="409">Conflict if the username already exists.</response>
            <response code="500">Server error if the user creation fails.</response>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.UsersController.UpdateUser(System.Int32,LoginSystemTask.Application.DTO.User.UserUpdateDto)">
            <summary>
            Updates an existing user.
            </summary>
            <param name="id">The ID of the user to update.</param>
            <param name="dto">The updated user details.</param>
            <returns>The updated user details.</returns>
            <response code="200">User updated successfully.</response>
            <response code="400">Invalid input (e.g., ID mismatch, missing fields, invalid role ID).</response>
            <response code="401">Unauthorized if the caller lacks admin privileges.</response>
            <response code="404">User not found.</response>
            <response code="409">Conflict if the updated username already exists.</response>
            <response code="500">Server error if the update fails.</response>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.UsersController.DeleteUser(System.Int32)">
            <summary>
            Deletes a user by ID.
            </summary>
            <param name="id">The ID of the user to delete.</param>
            <returns>No content on successful deletion.</returns>
            <response code="204">User deleted successfully.</response>
            <response code="401">Unauthorized if the caller lacks admin privileges.</response>
            <response code="404">User not found.</response>
            <response code="409">Conflict if the user is linked to an employee.</response>
            <response code="500">Server error if the deletion fails.</response>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.UsersController.GetUser(System.Int32)">
            <summary>
            Retrieves a user by ID.
            </summary>
            <param name="id">The ID of the user to retrieve.</param>
            <returns>The user details if found.</returns>
            <response code="200">User retrieved successfully.</response>
            <response code="401">Unauthorized if the caller is not authenticated.</response>
            <response code="404">User not found.</response>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.UsersController.GetAllUsers">
            <summary>
            Retrieves all users in the system.
            </summary>
            <returns>A list of all users.</returns>
            <response code="200">Users retrieved successfully.</response>
            <remarks>Currently no authentication required; consider adding authorization if needed.</remarks>
        </member>
        <member name="M:LoginSystemTask.API.Controllers.UsersController.GetUserByUsername(System.String)">
            <summary>
            Retrieves a user by username.
            </summary>
            <param name="username">The username of the user to retrieve.</param>
            <returns>The user details if found.</returns>
            <response code="200">User retrieved successfully.</response>
            <response code="401">Unauthorized if the caller is not authenticated.</response>
            <response code="404">User not found.</response>
        </member>
    </members>
</doc>
