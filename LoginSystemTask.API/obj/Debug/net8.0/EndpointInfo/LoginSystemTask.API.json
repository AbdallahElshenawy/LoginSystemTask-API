{
  "openapi": "3.0.1",
  "info": {
    "title": "Login System API",
    "description": "API for managing an Employee system.",
    "version": "v1"
  },
  "paths": {
    "/api/AuditLogs": {
      "get": {
        "tags": [
          "AuditLogs"
        ],
        "summary": "Retrieves audit logs with optional filters.",
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "description": "Filter by action type (e.g., \"Create\", \"Update\", \"Delete\"). Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityName",
            "in": "query",
            "description": "Filter by entity name (e.g., \"User\", \"Employee\", \"Role\"). Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Filter by the ID of the user who performed the action. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Filter logs on or after this date. Optional.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Filter logs on or before this date. Optional.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit logs retrieved successfully."
          },
          "401": {
            "description": "Unauthorized if the caller lacks admin privileges.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server error if the retrieval fails."
          }
        }
      }
    },
    "/api/Auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Authenticates a user and generates a JWT token.",
        "requestBody": {
          "description": "The login credentials.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the generated JWT token."
          },
          "401": {
            "description": "Invalid username or password.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/users/{userId}/assign-role": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Assigns a role to a specified user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user to whom the role will be assigned.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "roleName",
            "in": "query",
            "description": "The role to be assigned to the user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role assigned successfully."
          },
          "400": {
            "description": "Invalid input or user/role not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized if the caller lacks admin privileges.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/users/{userId}/role": {
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Updates the role of a specified user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user whose role is to be updated.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "roleName",
            "in": "query",
            "description": "The new role to be assigned to the user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User role updated successfully."
          },
          "400": {
            "description": "Invalid input or user not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized if the caller lacks admin privileges.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Employees": {
      "post": {
        "tags": [
          "Employees"
        ],
        "summary": "Creates a new employee in the system.",
        "requestBody": {
          "description": "The employee details to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeAddDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeAddDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeAddDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Employee created successfully."
          },
          "400": {
            "description": "Invalid input (e.g., missing fields, duplicate EmployeeCode, invalid UserId).",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized if the caller lacks admin privileges.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server error if the employee creation fails."
          }
        }
      },
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Retrieves a filtered list of employees.",
        "description": "Currently no authentication required; consider adding authorization if needed.",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filter by employee name (optional).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobTitle",
            "in": "query",
            "description": "Filter by job title (optional).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "minSalary",
            "in": "query",
            "description": "Filter by minimum salary (optional).",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "maxSalary",
            "in": "query",
            "description": "Filter by maximum salary (optional).",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "expandSalaryDetails",
            "in": "query",
            "description": "Include salary details in the response if true (default: false).",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employees retrieved successfully."
          },
          "400": {
            "description": "Invalid request (e.g., server error).",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Employees/{id}": {
      "put": {
        "tags": [
          "Employees"
        ],
        "summary": "Updates an existing employee.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The GUID of the employee to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated employee details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Employee updated successfully."
          },
          "400": {
            "description": "Invalid input (e.g., ID mismatch, invalid UserId, attempt to change EmployeeCode).",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized if the caller lacks admin privileges.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Employee not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server error if the update fails."
          }
        }
      },
      "delete": {
        "tags": [
          "Employees"
        ],
        "summary": "Deletes an employee by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The GUID of the employee to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Employee deleted successfully."
          },
          "400": {
            "description": "Invalid request (e.g., employee is active).",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized if the caller lacks admin privileges.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Employee not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server error if the deletion fails."
          }
        }
      }
    },
    "/api/Employees/{employeeCode}": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Retrieves an employee by their employee code.",
        "description": "Currently no authentication required; consider adding authorization if needed.",
        "parameters": [
          {
            "name": "employeeCode",
            "in": "path",
            "description": "The unique code of the employee to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee retrieved successfully."
          },
          "404": {
            "description": "Employee not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request (e.g., server error).",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Permissions": {
      "post": {
        "tags": [
          "Permissions"
        ],
        "summary": "Creates a new permission.",
        "requestBody": {
          "description": "The name of the permission to create.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Permission created successfully."
          },
          "400": {
            "description": "Invalid input (e.g., empty name, duplicate permission).",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized if the caller lacks admin privileges.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Retrieves all permissions.",
        "responses": {
          "200": {
            "description": "Permissions retrieved successfully."
          }
        }
      }
    },
    "/api/Permissions/{id}": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Retrieves a permission by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the permission.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Permission retrieved successfully."
          },
          "404": {
            "description": "Permission not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Permissions"
        ],
        "summary": "Updates an existing permission.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the permission to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The new name of the permission.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Permission updated successfully."
          },
          "400": {
            "description": "Invalid input (e.g., empty name, duplicate permission).",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized if the caller lacks admin privileges.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Permissions"
        ],
        "summary": "Deletes a permission by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the permission to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Permission deleted successfully."
          },
          "404": {
            "description": "Permission not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized if the caller lacks admin privileges.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Roles": {
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Creates a new role in the system.",
        "requestBody": {
          "description": "The name of the role to create.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role created successfully."
          },
          "400": {
            "description": "Invalid input (e.g., empty role name, role already exists).",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized if the caller lacks admin privileges.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server error if the role creation fails."
          }
        }
      },
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Retrieves all roles with their associated permissions.",
        "responses": {
          "200": {
            "description": "Roles retrieved successfully."
          },
          "401": {
            "description": "Unauthorized if the caller lacks admin privileges.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Roles/{roleId}/permissions/{permissionId}": {
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Assigns a permission to a role.",
        "description": "If the permission is already assigned, the request is ignored.",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The ID of the role to assign the permission to.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "permissionId",
            "in": "path",
            "description": "The ID of the permission to assign.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Permission assigned successfully."
          },
          "400": {
            "description": "Invalid input (e.g., role or permission not found).",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized if the caller lacks admin privileges.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server error if the assignment fails."
          }
        }
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Removes a permission from a role.",
        "description": "If the permission is not assigned, the request is ignored.",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The ID of the role to remove the permission from.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "permissionId",
            "in": "path",
            "description": "The ID of the permission to remove.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Permission removed successfully."
          },
          "401": {
            "description": "Unauthorized if the caller lacks admin privileges.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server error if the removal fails."
          }
        }
      }
    },
    "/api/Roles/{roleId}/permissions": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Retrieves the permissions assigned to a specific role.",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The ID of the role to retrieve permissions for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Permissions retrieved successfully."
          },
          "401": {
            "description": "Unauthorized if the caller lacks admin privileges.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Creates a new user in the system.",
        "requestBody": {
          "description": "The user details to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAddDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAddDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserAddDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully."
          },
          "400": {
            "description": "Invalid input (e.g., missing username or password, invalid role ID).",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized if the caller lacks admin privileges.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict if the username already exists.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server error if the user creation fails."
          }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieves all users in the system.",
        "description": "Currently no authentication required; consider adding authorization if needed.",
        "responses": {
          "200": {
            "description": "Users retrieved successfully."
          }
        }
      }
    },
    "/api/Users/{id}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates an existing user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The updated user details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully."
          },
          "400": {
            "description": "Invalid input (e.g., ID mismatch, missing fields, invalid role ID).",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized if the caller lacks admin privileges.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict if the updated username already exists.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server error if the update fails."
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes a user by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully."
          },
          "401": {
            "description": "Unauthorized if the caller lacks admin privileges.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict if the user is linked to an employee.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server error if the deletion fails."
          }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieves a user by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully."
          },
          "401": {
            "description": "Unauthorized if the caller is not authenticated.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/username/{username}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieves a user by username.",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The username of the user to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully."
          },
          "401": {
            "description": "Unauthorized if the caller is not authenticated.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "EmployeeAddDto": {
        "required": [
          "employeeCode",
          "jobTitle",
          "name",
          "salary"
        ],
        "type": "object",
        "properties": {
          "employeeCode": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "jobTitle": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "salary": {
            "maximum": 9999999.99,
            "minimum": 0.01,
            "type": "number",
            "format": "double"
          },
          "isActive": {
            "type": "boolean"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "salaryDetails": {
            "$ref": "#/components/schemas/SalaryDetailsDto"
          }
        },
        "additionalProperties": false
      },
      "EmployeeUpdateDto": {
        "required": [
          "employeeCode",
          "id",
          "jobTitle",
          "name",
          "salary"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "employeeCode": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "jobTitle": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "salary": {
            "maximum": 9999999.99,
            "minimum": 0.01,
            "type": "number",
            "format": "double"
          },
          "isActive": {
            "type": "boolean"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "salaryDetails": {
            "$ref": "#/components/schemas/SalaryDetailsDto"
          }
        },
        "additionalProperties": false
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "SalaryDetailsDto": {
        "type": "object",
        "properties": {
          "salary": {
            "type": "number",
            "format": "double"
          },
          "bonus": {
            "type": "number",
            "format": "double"
          },
          "deductions": {
            "type": "number",
            "format": "double"
          },
          "tax": {
            "type": "number",
            "format": "double"
          },
          "netSalary": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "UserAddDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "passwordHash": {
            "type": "string",
            "nullable": true
          },
          "roleId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserUpdateDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "passwordHash": {
            "type": "string",
            "nullable": true
          },
          "roleId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. \r\n\r\n Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\nExample: \"Bearer 12345abcdef\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ],
  "tags": [
    {
      "name": "AuditLogs",
      "description": "Controller for retrieving audit logs."
    },
    {
      "name": "Auth",
      "description": "Controller for handling authentication and user role management."
    },
    {
      "name": "Employees",
      "description": "Controller for managing employee operations."
    },
    {
      "name": "Permissions",
      "description": "Controller for managing permissions."
    },
    {
      "name": "Roles",
      "description": "Controller for managing roles and their permissions."
    },
    {
      "name": "Users",
      "description": "Controller for managing user operations."
    }
  ]
}